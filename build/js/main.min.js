(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _iosVhFix = require("./utils/ios-vh-fix");
var _video = require("./modules/video/video");
var _tabs = require("./modules/tabs");
// ---------------------------------

window.addEventListener('DOMContentLoaded', function () {
  (0, _iosVhFix.iosVhFix)();
  (0, _video.findVideos)();
});
window.addEventListener('load', function () {
  var tablists = document.querySelectorAll('[role=tablist]');
  for (var i = 0; i < tablists.length; i++) {
    new _tabs.TabsAutomatic(tablists[i]);
  }
});

// ---------------------------------

},{"./modules/tabs":2,"./modules/video/video":3,"./utils/ios-vh-fix":5}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabsAutomatic = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var TabsAutomatic = /*#__PURE__*/function () {
  function TabsAutomatic(groupNode) {
    _classCallCheck(this, TabsAutomatic);
    this.tablistNode = groupNode;
    this.tabs = [];
    this.firstTab = null;
    this.lastTab = null;
    this.tabs = Array.from(this.tablistNode.querySelectorAll('[role=tab]'));
    this.tabpanels = [];
    for (var i = 0; i < this.tabs.length; i += 1) {
      var tab = this.tabs[i];
      var tabpanel = document.getElementById(tab.getAttribute('aria-controls'));
      tab.tabIndex = -1;
      tab.setAttribute('aria-selected', 'false');
      this.tabpanels.push(tabpanel);
      tab.addEventListener('keydown', this.onKeydown.bind(this));
      tab.addEventListener('click', this.onClick.bind(this));
      if (!this.firstTab) {
        this.firstTab = tab;
      }
      this.lastTab = tab;
    }
    this.setSelectedTab(this.firstTab, false);
  }
  _createClass(TabsAutomatic, [{
    key: "setSelectedTab",
    value: function setSelectedTab(currentTab, setFocus) {
      if (typeof setFocus !== 'boolean') {
        setFocus = true;
      }
      for (var i = 0; i < this.tabs.length; i += 1) {
        var tab = this.tabs[i];
        if (currentTab === tab) {
          tab.setAttribute('aria-selected', 'true');
          tab.removeAttribute('tabindex');
          this.tabpanels[i].classList.remove('tabs__panel--is-hidden');
          if (setFocus) {
            tab.focus();
          }
        } else {
          tab.setAttribute('aria-selected', 'false');
          tab.tabIndex = -1;
          this.tabpanels[i].classList.add('tabs__panel--is-hidden');
        }
      }
    }
  }, {
    key: "setSelectedToPreviousTab",
    value: function setSelectedToPreviousTab(currentTab) {
      var index;
      if (currentTab === this.firstTab) {
        this.setSelectedTab(this.lastTab);
      } else {
        index = this.tabs.indexOf(currentTab);
        this.setSelectedTab(this.tabs[index - 1]);
      }
    }
  }, {
    key: "setSelectedToNextTab",
    value: function setSelectedToNextTab(currentTab) {
      var index;
      if (currentTab === this.lastTab) {
        this.setSelectedTab(this.firstTab);
      } else {
        index = this.tabs.indexOf(currentTab);
        this.setSelectedTab(this.tabs[index + 1]);
      }
    }

    /* EVENT HANDLERS */
  }, {
    key: "onKeydown",
    value: function onKeydown(event) {
      var tgt = event.currentTarget;
      var flag = false;
      switch (event.key) {
        case 'ArrowLeft':
          this.setSelectedToPreviousTab(tgt);
          flag = true;
          break;
        case 'ArrowRight':
          this.setSelectedToNextTab(tgt);
          flag = true;
          break;
        case 'Home':
          this.setSelectedTab(this.firstTab);
          flag = true;
          break;
        case 'End':
          this.setSelectedTab(this.lastTab);
          flag = true;
          break;
        default:
          break;
      }
      if (flag) {
        event.stopPropagation();
        event.preventDefault();
      }
    }
  }, {
    key: "onClick",
    value: function onClick(event) {
      this.setSelectedTab(event.currentTarget);
    }
  }]);
  return TabsAutomatic;
}(); // Initialize tablist
exports.TabsAutomatic = TabsAutomatic;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findVideos = findVideos;
function findVideos() {
  var videos = document.querySelectorAll('[data-video]');
  if (videos || videos.length > 0) {
    for (var i = 0; i < videos.length; i++) {
      setupVideo(videos[i]);
    }
  }
}
function setupVideo(video) {
  var link = video.querySelector('.video__link');
  var button = video.querySelector('.video__button');
  var id = parseLinkURL(link);
  video.addEventListener('click', function () {
    var iframe = createIframe(id);
    link.remove();
    button.remove();
    video.appendChild(iframe);
  });
  link.removeAttribute('href');
  video.classList.add('video--enabled');
}
function parseLinkURL(link) {
  var regexp = /https:\/\/youtu\.be\/([a-zA-Z0-9_-]+)/i;
  var url = link.href;
  var match = url.match(regexp);
  return match[1];
}
function createIframe(id) {
  var iframe = document.createElement('iframe');
  iframe.setAttribute('allowfullscreen', '');
  iframe.setAttribute('allow', 'autoplay');
  iframe.setAttribute('src', generateURL(id));
  iframe.classList.add('video__iframe');
  return iframe;
}
function generateURL(id) {
  var query = '?rel=0&showinfo=0&autoplay=1';
  return 'https://www.youtube.com/embed/' + id + query;
}

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosChecker = void 0;
var iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)
  // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};
exports.iosChecker = iosChecker;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosVhFix = void 0;
var _iosChecker = require("./ios-checker");
var iosVhFix = function iosVhFix() {
  if (!(!!window.MSInputMethodContext && !!document.documentMode)) {
    if ((0, _iosChecker.iosChecker)()) {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      window.addEventListener('resize', function () {
        vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      });
    }
  }
};
exports.iosVhFix = iosVhFix;

},{"./ios-checker":4}]},{},[1])


//# sourceMappingURL=main.min.js.map
